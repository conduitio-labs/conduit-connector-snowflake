// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package destination

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ConfigSnowflakeAutoCleanupStage  = "snowflake.autoCleanupStage"
	ConfigSnowflakeCompression       = "snowflake.compression"
	ConfigSnowflakeDatabase          = "snowflake.database"
	ConfigSnowflakeFileUploadThreads = "snowflake.fileUploadThreads"
	ConfigSnowflakeFormat            = "snowflake.format"
	ConfigSnowflakeHost              = "snowflake.host"
	ConfigSnowflakeKeepAlive         = "snowflake.keepAlive"
	ConfigSnowflakeNamingPrefix      = "snowflake.namingPrefix"
	ConfigSnowflakePassword          = "snowflake.password"
	ConfigSnowflakePort              = "snowflake.port"
	ConfigSnowflakePrimaryKey        = "snowflake.primaryKey"
	ConfigSnowflakeProcessingWorkers = "snowflake.processingWorkers"
	ConfigSnowflakeSchema            = "snowflake.schema"
	ConfigSnowflakeStage             = "snowflake.stage"
	ConfigSnowflakeTable             = "snowflake.table"
	ConfigSnowflakeUsername          = "snowflake.username"
	ConfigSnowflakeWarehouse         = "snowflake.warehouse"
)

func (Config) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ConfigSnowflakeAutoCleanupStage: {
			Default:     "true",
			Description: "Automatically clean uploaded files to stage after processing, except when they fail.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigSnowflakeCompression: {
			Default:     "zstd",
			Description: "Compression to use when staging files in Snowflake",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
				config.ValidationInclusion{List: []string{"gzip", "zstd", "copy"}},
			},
		},
		ConfigSnowflakeDatabase: {
			Default:     "",
			Description: "Database for the snowflake connection",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakeFileUploadThreads: {
			Default:     "30",
			Description: "Number of threads to run for PUT file uploads.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		ConfigSnowflakeFormat: {
			Default:     "csv",
			Description: "Data type of file we upload and copy data from to snowflake",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
				config.ValidationInclusion{List: []string{"csv"}},
			},
		},
		ConfigSnowflakeHost: {
			Default:     "",
			Description: "Host for the snowflake connection",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakeKeepAlive: {
			Default:     "true",
			Description: "Whether to keep the session alive even when the connection is idle.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigSnowflakeNamingPrefix: {
			Default:     "meroxa",
			Description: "Prefix to append to update_at , deleted_at, create_at at destination table",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakePassword: {
			Default:     "",
			Description: "Password for the snowflake connection",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakePort: {
			Default:     "",
			Description: "Port for the snowflake connection",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakePrimaryKey: {
			Default:     "",
			Description: "Primary key of the source table",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakeProcessingWorkers: {
			Default:     "1",
			Description: "For CSV processing, the number of goroutines to concurrently process CSV rows.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		ConfigSnowflakeSchema: {
			Default:     "",
			Description: "Schema for the snowflake connection",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakeStage: {
			Default:     "",
			Description: "Snowflake Stage to use for uploading files before merging into destination table.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakeTable: {
			Default:     "",
			Description: "Table name.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakeUsername: {
			Default:     "",
			Description: "Username for the snowflake connection",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnowflakeWarehouse: {
			Default:     "",
			Description: "Warehouse for the snowflake connection",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
